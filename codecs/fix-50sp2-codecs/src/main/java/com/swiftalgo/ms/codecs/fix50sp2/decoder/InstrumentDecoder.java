/* Generated Fix Gateway message codec */
package com.swiftalgo.ms.codecs.fix50sp2.decoder;

import org.agrona.AsciiNumberFormatException;
import org.agrona.MutableDirectBuffer;
import org.agrona.AsciiSequenceView;
import static uk.co.real_logic.artio.dictionary.generation.CodecUtil.*;
import static uk.co.real_logic.artio.dictionary.SessionConstants.*;
import uk.co.real_logic.artio.builder.Decoder;
import uk.co.real_logic.artio.fields.DecimalFloat;
import uk.co.real_logic.artio.util.MutableAsciiBuffer;
import uk.co.real_logic.artio.util.AsciiBuffer;
import uk.co.real_logic.artio.fields.LocalMktDateEncoder;
import uk.co.real_logic.artio.fields.UtcTimestampEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import uk.co.real_logic.artio.dictionary.CharArraySet;
import org.agrona.collections.IntHashSet;
import org.agrona.collections.IntHashSet.IntIterator;
import uk.co.real_logic.artio.EncodingException;
import uk.co.real_logic.artio.dictionary.CharArrayWrapper;
import uk.co.real_logic.artio.builder.Encoder;
import uk.co.real_logic.artio.builder.CommonDecoderImpl;
import static java.nio.charset.StandardCharsets.US_ASCII;
import static uk.co.real_logic.artio.builder.Validation.CODEC_VALIDATION_ENABLED;
import static uk.co.real_logic.artio.builder.RejectUnknownField.CODEC_REJECT_UNKNOWN_FIELD_ENABLED;
import static uk.co.real_logic.artio.builder.RejectUnknownEnumValue.CODEC_REJECT_UNKNOWN_ENUM_VALUE_ENABLED;
import com.swiftalgo.ms.codecs.fix50sp2.*;
import com.swiftalgo.ms.codecs.fix50sp2.builder.InstrumentEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.SecAltIDGrpEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.SecAltIDGrpEncoder.SecurityAltIDGroupEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.SecurityXMLEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.EvntGrpEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.EvntGrpEncoder.EventsGroupEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.InstrumentPartiesEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.InstrumentPartiesEncoder.InstrumentPartiesGroupEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.InstrumentPtysSubGrpEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.InstrumentPtysSubGrpEncoder.InstrumentPartySubIDsGroupEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.ComplexEventsEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.ComplexEventsEncoder.ComplexEventsGroupEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.ComplexEventDatesEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.ComplexEventDatesEncoder.ComplexEventDatesGroupEncoder;
import com.swiftalgo.ms.codecs.fix50sp2.builder.ComplexEventTimesEncoder;
import static com.swiftalgo.ms.codecs.fix50sp2.builder.ComplexEventTimesEncoder.ComplexEventTimesGroupEncoder;

public interface InstrumentDecoder  extends SecAltIDGrpDecoder, SecurityXMLDecoder, EvntGrpDecoder, InstrumentPartiesDecoder, ComplexEventsDecoder
{

    public char[] symbol();
    public boolean hasSymbol();
    public int symbolLength();
    public void symbol(AsciiSequenceView view);
    public char[] symbolSfx();
    public boolean hasSymbolSfx();
    public int symbolSfxLength();
    public SymbolSfx symbolSfxAsEnum();
    public void symbolSfx(AsciiSequenceView view);
    public char[] securityID();
    public boolean hasSecurityID();
    public int securityIDLength();
    public void securityID(AsciiSequenceView view);
    public char[] securityIDSource();
    public boolean hasSecurityIDSource();
    public int securityIDSourceLength();
    public SecurityIDSource securityIDSourceAsEnum();
    public void securityIDSource(AsciiSequenceView view);
    public int product();
    public boolean hasProduct();
    public Product productAsEnum();
    public char[] productComplex();
    public boolean hasProductComplex();
    public int productComplexLength();
    public void productComplex(AsciiSequenceView view);
    public char[] securityGroup();
    public boolean hasSecurityGroup();
    public int securityGroupLength();
    public void securityGroup(AsciiSequenceView view);
    public char[] cFICode();
    public boolean hasCFICode();
    public int cFICodeLength();
    public void cFICode(AsciiSequenceView view);
    public char[] securityType();
    public boolean hasSecurityType();
    public int securityTypeLength();
    public SecurityType securityTypeAsEnum();
    public void securityType(AsciiSequenceView view);
    public char[] securitySubType();
    public boolean hasSecuritySubType();
    public int securitySubTypeLength();
    public void securitySubType(AsciiSequenceView view);
    public byte[] maturityMonthYear();
    public boolean hasMaturityMonthYear();
    public int maturityMonthYearLength();
    public void maturityMonthYear(AsciiSequenceView view);
    public byte[] maturityDate();
    public boolean hasMaturityDate();
    public int maturityDateLength();
    public void maturityDate(AsciiSequenceView view);
    public byte[] maturityTime();
    public boolean hasMaturityTime();
    public int maturityTimeLength();
    public void maturityTime(AsciiSequenceView view);
    public char[] settleOnOpenFlag();
    public boolean hasSettleOnOpenFlag();
    public int settleOnOpenFlagLength();
    public void settleOnOpenFlag(AsciiSequenceView view);
    public char instrmtAssignmentMethod();
    public boolean hasInstrmtAssignmentMethod();
    public char[] securityStatus();
    public boolean hasSecurityStatus();
    public int securityStatusLength();
    public SecurityStatus securityStatusAsEnum();
    public void securityStatus(AsciiSequenceView view);
    public byte[] couponPaymentDate();
    public boolean hasCouponPaymentDate();
    public int couponPaymentDateLength();
    public void couponPaymentDate(AsciiSequenceView view);
    public char[] restructuringType();
    public boolean hasRestructuringType();
    public int restructuringTypeLength();
    public RestructuringType restructuringTypeAsEnum();
    public void restructuringType(AsciiSequenceView view);
    public char[] seniority();
    public boolean hasSeniority();
    public int seniorityLength();
    public Seniority seniorityAsEnum();
    public void seniority(AsciiSequenceView view);
    public DecimalFloat notionalPercentageOutstanding();
    public boolean hasNotionalPercentageOutstanding();
    public DecimalFloat originalNotionalPercentageOutstanding();
    public boolean hasOriginalNotionalPercentageOutstanding();
    public DecimalFloat attachmentPoint();
    public boolean hasAttachmentPoint();
    public DecimalFloat detachmentPoint();
    public boolean hasDetachmentPoint();
    public byte[] issueDate();
    public boolean hasIssueDate();
    public int issueDateLength();
    public void issueDate(AsciiSequenceView view);
    public char[] repoCollateralSecurityType();
    public boolean hasRepoCollateralSecurityType();
    public int repoCollateralSecurityTypeLength();
    public void repoCollateralSecurityType(AsciiSequenceView view);
    public int repurchaseTerm();
    public boolean hasRepurchaseTerm();
    public DecimalFloat repurchaseRate();
    public boolean hasRepurchaseRate();
    public DecimalFloat factor();
    public boolean hasFactor();
    public char[] creditRating();
    public boolean hasCreditRating();
    public int creditRatingLength();
    public void creditRating(AsciiSequenceView view);
    public char[] instrRegistry();
    public boolean hasInstrRegistry();
    public int instrRegistryLength();
    public void instrRegistry(AsciiSequenceView view);
    public char[] countryOfIssue();
    public boolean hasCountryOfIssue();
    public int countryOfIssueLength();
    public void countryOfIssue(AsciiSequenceView view);
    public char[] stateOrProvinceOfIssue();
    public boolean hasStateOrProvinceOfIssue();
    public int stateOrProvinceOfIssueLength();
    public void stateOrProvinceOfIssue(AsciiSequenceView view);
    public char[] localeOfIssue();
    public boolean hasLocaleOfIssue();
    public int localeOfIssueLength();
    public void localeOfIssue(AsciiSequenceView view);
    public byte[] redemptionDate();
    public boolean hasRedemptionDate();
    public int redemptionDateLength();
    public void redemptionDate(AsciiSequenceView view);
    public DecimalFloat strikePrice();
    public boolean hasStrikePrice();
    public char[] strikeCurrency();
    public boolean hasStrikeCurrency();
    public int strikeCurrencyLength();
    public void strikeCurrency(AsciiSequenceView view);
    public DecimalFloat strikeMultiplier();
    public boolean hasStrikeMultiplier();
    public DecimalFloat strikeValue();
    public boolean hasStrikeValue();
    public int strikePriceDeterminationMethod();
    public boolean hasStrikePriceDeterminationMethod();
    public StrikePriceDeterminationMethod strikePriceDeterminationMethodAsEnum();
    public int strikePriceBoundaryMethod();
    public boolean hasStrikePriceBoundaryMethod();
    public StrikePriceBoundaryMethod strikePriceBoundaryMethodAsEnum();
    public DecimalFloat strikePriceBoundaryPrecision();
    public boolean hasStrikePriceBoundaryPrecision();
    public int underlyingPriceDeterminationMethod();
    public boolean hasUnderlyingPriceDeterminationMethod();
    public UnderlyingPriceDeterminationMethod underlyingPriceDeterminationMethodAsEnum();
    public char optAttribute();
    public boolean hasOptAttribute();
    public DecimalFloat contractMultiplier();
    public boolean hasContractMultiplier();
    public int contractMultiplierUnit();
    public boolean hasContractMultiplierUnit();
    public ContractMultiplierUnit contractMultiplierUnitAsEnum();
    public int flowScheduleType();
    public boolean hasFlowScheduleType();
    public FlowScheduleType flowScheduleTypeAsEnum();
    public DecimalFloat minPriceIncrement();
    public boolean hasMinPriceIncrement();
    public DecimalFloat minPriceIncrementAmount();
    public boolean hasMinPriceIncrementAmount();
    public char[] unitOfMeasure();
    public boolean hasUnitOfMeasure();
    public int unitOfMeasureLength();
    public UnitOfMeasure unitOfMeasureAsEnum();
    public void unitOfMeasure(AsciiSequenceView view);
    public DecimalFloat unitOfMeasureQty();
    public boolean hasUnitOfMeasureQty();
    public char[] priceUnitOfMeasure();
    public boolean hasPriceUnitOfMeasure();
    public int priceUnitOfMeasureLength();
    public void priceUnitOfMeasure(AsciiSequenceView view);
    public DecimalFloat priceUnitOfMeasureQty();
    public boolean hasPriceUnitOfMeasureQty();
    public char settlMethod();
    public boolean hasSettlMethod();
    public SettlMethod settlMethodAsEnum();
    public int exerciseStyle();
    public boolean hasExerciseStyle();
    public ExerciseStyle exerciseStyleAsEnum();
    public int optPayoutType();
    public boolean hasOptPayoutType();
    public OptPayoutType optPayoutTypeAsEnum();
    public DecimalFloat optPayoutAmount();
    public boolean hasOptPayoutAmount();
    public char[] priceQuoteMethod();
    public boolean hasPriceQuoteMethod();
    public int priceQuoteMethodLength();
    public PriceQuoteMethod priceQuoteMethodAsEnum();
    public void priceQuoteMethod(AsciiSequenceView view);
    public char[] valuationMethod();
    public boolean hasValuationMethod();
    public int valuationMethodLength();
    public ValuationMethod valuationMethodAsEnum();
    public void valuationMethod(AsciiSequenceView view);
    public int listMethod();
    public boolean hasListMethod();
    public ListMethod listMethodAsEnum();
    public DecimalFloat capPrice();
    public boolean hasCapPrice();
    public DecimalFloat floorPrice();
    public boolean hasFloorPrice();
    public int putOrCall();
    public boolean hasPutOrCall();
    public PutOrCall putOrCallAsEnum();
    public boolean flexibleIndicator();
    public boolean hasFlexibleIndicator();
    public boolean flexProductEligibilityIndicator();
    public boolean hasFlexProductEligibilityIndicator();
    public char[] timeUnit();
    public boolean hasTimeUnit();
    public int timeUnitLength();
    public TimeUnit timeUnitAsEnum();
    public void timeUnit(AsciiSequenceView view);
    public DecimalFloat couponRate();
    public boolean hasCouponRate();
    public char[] securityExchange();
    public boolean hasSecurityExchange();
    public int securityExchangeLength();
    public void securityExchange(AsciiSequenceView view);
    public int positionLimit();
    public boolean hasPositionLimit();
    public int nTPositionLimit();
    public boolean hasNTPositionLimit();
    public char[] issuer();
    public boolean hasIssuer();
    public int issuerLength();
    public void issuer(AsciiSequenceView view);
    public int encodedIssuerLen();
    public boolean hasEncodedIssuerLen();
    public byte[] encodedIssuer();
    public boolean hasEncodedIssuer();
    public char[] securityDesc();
    public boolean hasSecurityDesc();
    public int securityDescLength();
    public void securityDesc(AsciiSequenceView view);
    public int encodedSecurityDescLen();
    public boolean hasEncodedSecurityDescLen();
    public byte[] encodedSecurityDesc();
    public boolean hasEncodedSecurityDesc();
    public char[] pool();
    public boolean hasPool();
    public int poolLength();
    public void pool(AsciiSequenceView view);
    public byte[] contractSettlMonth();
    public boolean hasContractSettlMonth();
    public int contractSettlMonthLength();
    public void contractSettlMonth(AsciiSequenceView view);
    public int cPProgram();
    public boolean hasCPProgram();
    public CPProgram cPProgramAsEnum();
    public char[] cPRegType();
    public boolean hasCPRegType();
    public int cPRegTypeLength();
    public void cPRegType(AsciiSequenceView view);
    public byte[] datedDate();
    public boolean hasDatedDate();
    public int datedDateLength();
    public void datedDate(AsciiSequenceView view);
    public byte[] interestAccrualDate();
    public boolean hasInterestAccrualDate();
    public int interestAccrualDateLength();
    public void interestAccrualDate(AsciiSequenceView view);

}
